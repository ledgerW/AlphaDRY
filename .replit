modules = ["python-3.11", "postgresql-16"]

[nix]
channel = "stable-24_05"

[env]
REPLIT_DISABLE_PACKAGE_LAYER = "1"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Initialize Database"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "FastAPI Server"

[[workflows.workflow]]
name = "Initialize Database"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
# Only use create_db_and_tables in development
args = """python -c 
import os
from database import create_db_and_tables
if os.getenv("REPLIT_DEPLOYMENT") != "1":
    create_db_and_tables(force_reset=True)
"""

[[workflows.workflow]]
name = "FastAPI Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "uvicorn main:app --host 0.0.0.0 --port 80 --reload"
waitForPort = 80

[deployment]
run = ["sh", "-c", """
if [ \"$REPLIT_DEPLOYMENT\" = \"1\" ]; then
    # Production: Install deps and run migrations (preserves prod_ tables)
    pip install -r requirements.txt &&
    
    # Run cleanup scripts first to handle any existing data issues
    psql $DATABASE_URL -f db/scripts/cleanup_foreign_keys.sql &&
    psql $DATABASE_URL -f db/scripts/cleanup_null_addresses.sql &&
    psql $DATABASE_URL -f db/scripts/cleanup_token_duplicates.sql &&
    
    # Then run deployment safety SQL to create backups
    psql $DATABASE_URL -f db/deployment_safety.sql &&
    
    # Clean up old backups
    psql $DATABASE_URL -f db/scripts/cleanup_backups.sql &&
    
    # Finally run migrations
    alembic upgrade head &&
    
    uvicorn main:app --host 0.0.0.0 --port 80
else
    # Development: Install deps, reset dev_ tables, run migrations
    pip install -r requirements.txt &&
    python -c 'from database import reset_db; reset_db()' &&
    alembic upgrade head &&
    uvicorn main:app --host 0.0.0.0 --port 80
fi
"""]
build = ["sh", "-c", "pip install -r requirements.txt"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 80
externalPort = 80

[packager.features]
guessImports = false
packageSearch = false
