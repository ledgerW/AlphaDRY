modules = ["python-3.11", "postgresql-16"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Initialize Database"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "FastAPI Server"

[[workflows.workflow]]
name = "Initialize Database"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
# Only force reset in development environment
args = """python -c '
import os
from database import create_db_and_tables
if os.getenv("REPLIT_DEPLOYMENT") != "1":
    create_db_and_tables(force_reset=True)
else:
    create_db_and_tables(force_reset=False)
'"""

[[workflows.workflow]]
name = "FastAPI Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
waitForPort = 8000

[deployment]
run = [
  "sh",
  "-c",
  # Create backup first, then run deployment safety SQL, then initialize without force reset
  """
  pip install -r requirements.txt && \
  if [ "$REPLIT_DEPLOYMENT" = "1" ]; then
    # Production deployment steps
    backup_file="backup_$(date +%Y%m%d_%H%M%S).sql"
    echo "Creating backup: $backup_file" && \
    PGPASSWORD=$DATABASE_PASSWORD pg_dump $DATABASE_URL > $backup_file && \
    echo "Running deployment safety SQL..." && \
    PGPASSWORD=$DATABASE_PASSWORD psql $DATABASE_URL -f db/deployment_safety.sql && \
    echo "Initializing database..." && \
    python -c 'from database import create_db_and_tables; create_db_and_tables(force_reset=False)'
  else
    # Development deployment - can reset
    python -c 'from database import create_db_and_tables; create_db_and_tables(force_reset=True)'
  fi && \
  uvicorn main:app --host 0.0.0.0 --port 8000
  """
]
build = ["sh", "-c", "pip install -r requirements.txt"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 8000
externalPort = 8000
