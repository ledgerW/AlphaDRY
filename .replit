modules = ["python-3.11", "postgresql-16"]

[nix]
channel = "stable-24_05"

[env]
REPLIT_DISABLE_PACKAGE_LAYER = "1"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Initialize Database"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "FastAPI Server"

[[workflows.workflow]]
name = "Initialize Database"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
# Only use create_db_and_tables in development
args = """python -c 
import os
from database import create_db_and_tables
if os.getenv("REPLIT_DEPLOYMENT") != "1":
    create_db_and_tables(force_reset=True)
"""

[[workflows.workflow]]
name = "FastAPI Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "uvicorn main:app --host 0.0.0.0 --port 80 --reload"
waitForPort = 80

[deployment]
run = ["sh", "-c", """
set -e  # Exit on any error

log() {
    echo "[$(date -u '+%Y-%m-%d %H:%M:%S UTC')] $1"
}

handle_error() {
    log "ERROR: Deployment failed at step: $1"
    exit 1
}

wait_for_port() {
    local port=$1
    local timeout=$2
    local start_time=$(date +%s)
    
    while ! nc -z localhost $port; do
        if [ $(($(date +%s) - start_time)) -gt $timeout ]; then
            log "ERROR: Timed out waiting for port $port"
            return 1
        fi
        sleep 1
    done
    return 0
}

if [ \"$REPLIT_DEPLOYMENT\" = \"1\" ]; then
    # Phase 1: Install dependencies
    log "Installing dependencies..."
    pip install -r requirements.txt || handle_error "pip install"
    
    # Phase 2: Database cleanup
    log "Starting database cleanup..."
    
    # Drop warpcasts tables first
    log "Dropping warpcasts tables..."
    psql $DATABASE_URL -f db/scripts/cleanup_warpcasts.sql || handle_error "cleanup_warpcasts"
    
    # Run cleanup scripts sequentially
    for script in fix_token_reference cleanup_foreign_keys cleanup_null_addresses cleanup_token_duplicates; do
        log "Running cleanup script: $script..."
        psql $DATABASE_URL -f "db/scripts/${script}.sql" || handle_error "$script"
    done
    
    # Phase 3: Backup and safety
    log "Creating database backups..."
    psql $DATABASE_URL -f db/deployment_safety.sql || handle_error "deployment_safety"
    
    log "Cleaning up old backups..."
    psql $DATABASE_URL -f db/scripts/cleanup_backups.sql || handle_error "cleanup_backups"
    
    # Phase 4: Database migrations
    log "Running database migrations..."
    alembic upgrade head || handle_error "alembic_upgrade"
    
    # Phase 5: Start server
    log "Starting FastAPI server..."
    # Run uvicorn in background and capture PID
    uvicorn main:app --host 0.0.0.0 --port 80 &
    UVICORN_PID=$!
    
    # Wait up to 30 seconds for server to start
    if ! wait_for_port 80 30; then
        kill $UVICORN_PID 2>/dev/null || true
        handle_error "server_startup"
    fi
    
    # Keep running until server exits
    wait $UVICORN_PID
else
    # Development environment
    log "Setting up development environment..."
    
    pip install -r requirements.txt || handle_error "pip install"
    python -c 'from database import reset_db; reset_db()' || handle_error "reset_db"
    alembic upgrade head || handle_error "alembic_upgrade"
    
    log "Starting development server..."
    uvicorn main:app --host 0.0.0.0 --port 80 --reload
fi
"""]
build = ["sh", "-c", "pip install -r requirements.txt"]
deploymentTarget = "cloudrun"

[[ports]]
localPort = 80
externalPort = 80

[packager.features]
guessImports = false
packageSearch = false
